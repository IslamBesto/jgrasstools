sim(name:"Extractnetwork") {

    // workspace directory
    def work = System.getProperty("oms3.work");
    def pm = new eu.hydrologis.jgrass.hortonmachine.libs.monitor.PrintStreamProgressMonitor(System.out, System.err);
    def dummy = eu.hydrologis.jgrass.hortonmachine.utils.coverage.CoverageUtilities.buildDummyCoverage();
    

	model{
		components{
			reader    'eu.hydrologis.jgrass.hortonmachine.io.arcgrid.ArcgridCoverageReader'
			writer    'eu.hydrologis.jgrass.hortonmachine.io.arcgrid.ArcgridCoverageWriter'
			pitfiller 'eu.hydrologis.jgrass.hortonmachine.modules.demmanipulation.pitfiller.Pitfiller'
			flowDirections 'eu.hydrologis.jgrass.hortonmachine.modules.geomorphology.flow.FlowDirections'
			drainDir 'eu.hydrologis.jgrass.hortonmachine.modules.geomorphology.draindir.DrainDir'
			extractNetwork 'eu.hydrologis.jgrass.hortonmachine.modules.network.extractnetwork.ExtractNetwork'
		}

		parameter{
			'reader.file' "$work/src/test/resources/dtm_test.asc"
			'writer.file' "$work/src/test/resources/netsilli_test.asc"
			'reader.fileNovalue'		(-9999.0)
			'reader.geodataNovalue'		Double.NaN
			'drainDir.doLad'			(true)
			'drainDir.pLambda'			1
			'extractNetwork.pMode'		0
	        'extractNetwork.pThres'		5
	        'extractNetwork.doNetfc'	(false)
	        'drainDir.inFlownet' dummy
	        'extractNetwork.inSlope' dummy
	        'extractNetwork.inTc3' dummy
	        
	        'pitfiller.pm' pm
			'flowDirections.pm' pm
			'drainDir.pm' pm
			'extractNetwork.pm' pm
		}
	
		connect{
			'reader.geodata' 'pitfiller.inDem'
			'pitfiller.outPit' 'flowDirections.inPit'
			'flowDirections.outFlow' 'drainDir.inFlow'
			'pitfiller.outPit' 'drainDir.inPit'
			'drainDir.outFlow' 'extractNetwork.inFlow'
			'drainDir.outTca' 'extractNetwork.inTca'
			'extractNetwork.outNet' 'writer.geodata'
		}
		
	}
	
}
